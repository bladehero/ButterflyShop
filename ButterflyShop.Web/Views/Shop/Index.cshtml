@model ButterflyShop.Web.Models.ShopModels.IndexVM
@using static ButterflyShop.Web.Extensions.CustomExtensions
@{
    var havePages = Model.Products?.Count() > 0;
    var categories = Model.Categories ?? new List<int>();
}
<!-- Page Banner Section Start -->
<div class="container-fluid bg-skyblue py-5">
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="page-banner text-left">
                    <h2>Магазин</h2>
                    <ul class="page-breadcrumb">
                        <li><a href="index.html">Главная</a></li>
                        <li>Магазин</li>
                        @if (!string.IsNullOrWhiteSpace(Model.Search))
                        {
                            <li>По запросу: "<b>@Model.Search</b>"</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Page Banner Section End -->
<!-- Shop Section Start -->
<div class="shop-section section pt-60 pt-lg-40 pt-md-30 pt-sm-20 pt-xs-30  pb-70 pb-lg-50 pb-md-40 pb-sm-60 pb-xs-50">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="shop-area">
                    @*<div class="row">
                        <div class="col-12">
                            <!-- Grid & List View Start -->
                            <div class="shop-topbar-wrapper d-flex justify-content-between align-items-center">
                                <!--Toolbar Short Area Start-->
                                <div class="toolbar-short-area d-md-flex align-items-center">
                                    <div class="toolbar-shorter ">
                                        <label>Сортировать:</label>
                                        <select class="wide" id="sortBy">
                                            <option data-display="Выберите">Без сортировки</option>
                                            <option value="1">По алфавиту (возрастание)</option>
                                            <option value="2">По алфавиту (убывание)</option>
                                            <option value="3">По цене (возрастание)</option>
                                            <option value="4">По цене (убывание)</option>
                                        </select>
                                    </div>
                                </div>
                                <!--Toolbar Short Area End-->
                            </div>
                            <!-- Grid & List View End -->
                        </div>
                    </div>*@
                    <div class="row">
                        <div class="col-lg-3 order-lg-1 order-2">
                            <!-- Single Sidebar Start  -->
                            <div class="common-sidebar-widget">
                                <h3 class="sidebar-title">Категории</h3>
                                <ul class="sidebar-list">
                                    @foreach (var category in Model.CategoryHierarchy)
                                    {
                                        <li>
                                            <input type="checkbox" name="category_@category.Id" value="@category.Id" class="category-input" style="margin-left: @(category.Level * 12)px;" @(categories.Contains(category.Id) ? "checked" : null)/>
                                            <label for="category_@category.Id" class="@(category.IsParent ? "font-weight-bold" : null)">@category.Name</label>
                                        </li>
                                    }
                                </ul>
                            </div>
                            <!-- Single Sidebar End  -->
                            <!-- Single Sidebar Start  -->
                            <div class="common-sidebar-widget">
                                <h3 class="sidebar-title">Диапазон цен</h3>
                                <div class="sidebar-price">
                                    <div id="price-range" class="mb-20"></div>
                                    <input type="text" id="price-amount" class="price-amount" readonly>
                                </div>
                            </div>
                            <!-- Single Sidebar End  -->
                            <div class="row">
                                <div class="col text-center">
                                    <button type="button" class="btn" id="filter-btn">Найти</button>
                                    <button type="button" class="btn" id="clear-filter-btn">Отмена</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-9 order-lg-2 order-1">
                            <div class="row">
                                <div class="col-12">
                                    <div class="shop-product">
                                        <div class="tab-content">
                                            @if (havePages)
                                            {
                                                var index = 0;
                                                var isFirst = true;
                                                foreach (var products in Model.Products)
                                                {
                                                    <div id="page_@(index++)" class="tab-pane fade@(isFirst ? " active show" : null)">
                                                        <div class="product-grid-view">
                                                            <div class="row">
                                                                @foreach (var product in products)
                                                                {
                                                                    <div class="col-lg-4 col-md-6">
                                                                        @await Html.PartialAsync("~/Views/Shared/_ProductCard.cshtml", product)
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                    isFirst = false;
                                                }
                                            }
                                            else
                                            {
                                                <p class="lead">Ничего не найдено...</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                                @if (havePages)
                                {
                                    <div class="col">
                                        <div class="row mb-30 mb-sm-40 mb-xs-30 justify-content-center">
                                            <div class="col">
                                                <ul class="page-pagination nav nav-tabs">
                                                    @{
                                                        var isFirst = true;
                                                        for (int i = 0; i < Model.Products.Count(); i++)
                                                        {
                                                            <li><a data-toggle="tab" href="#page_@(i)" class="@(isFirst ? "active" : null)">@(i + 1)</a></li>
                                                            isFirst = false;
                                                        }
                                                    }
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Shop Section End -->

@section Scripts {
    <script>
        /*-----------------------------------
            Price slider Active
        ----------------------------------*/
        $('#price-range').slider({
            range: true,
            min: @Model.MinPrice,
            max: @Model.MaxPrice,
            values: [@((Model.SelectedMinPrice).HasValue ? Model.SelectedMinPrice : Model.MinPrice), @((Model.SelectedMaxPrice).HasValue ? Model.SelectedMaxPrice : Model.MaxPrice)],
            slide: function (event, ui) {
                $('#price-amount').val('₴' + ui.values[0] + ' - ₴' + ui.values[1]);
            }
        });
        $('#price-amount').val($('#price-range').slider('values', 0) + '₴ - ' + $('#price-range').slider('values', 1) + '₴');
        $('#filter-btn').click(function () {
            var min = $('#price-range').slider('values')[0];
            var max = $('#price-range').slider('values')[1];
            var categories = '';
            var isFirst = true;
            $('ul.sidebar-list li input[type="checkbox"]:checked').each(function (a, b) {
                if (isFirst) {
                    isFirst = false;
                } else {
                    categories += ',';
                }
            	categories += $(b).val();
            });
            window.location.href = '@Url.Action("Search", "Shop")?categoriesStr=' + categories + '&minPrice=' + min + '&maxPrice=' + max;
        });
        $('#clear-filter-btn').click(function () {
            window.location.href = '@Url.Action("Index", "Shop")';
        });
        @*$('#sortBy').change(function () {
            var _this = $(this);
            var option = _this.children("option:selected").val();
            switch (option) {
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    break;
                case 4:
                    break;
                default:
                    break;
            }
        });*@
    </script>
}
